odoo.define('discount_limit.editor', function (require) {
    'use strict';


var models = require('point_of_sale.models');
var pos_disc = require('point_of_sale.screens');
var core = require('web.core');
var _t = core._t;
models.load_fields('pos.category', 'discount_limit');
models.load_fields('product.product', 'product_discount_limit');

pos_disc.OrderWidget.include({

    set_value: function(val) {
        console.log("ddddd")
    	var order = this.pos.get_order();
    	var prod_id = order.selected_orderline.product.pos_categ_id[0]
    	 if(this.pos.config.apply_discount_limit == 'product_category'){
    	if (order.get_selected_orderline()) {
            var mode = this.numpad_state.get('mode');
            if( mode === 'quantity'){
                order.get_selected_orderline().set_quantity(val);
            }else if( mode === 'discount'){
            var mi = Math.round(val)
            if(Number.isInteger(prod_id)){

                if(this.pos.db.category_by_id[prod_id].discount_limit){
                    if (mi > this.pos.db.category_by_id[prod_id].discount_limit){
                        this.gui.show_popup('error', {
                            title : _t("Discount Not Possible"),
                            body  : _t("You cannot apply discount above the discount limit."),
                        });
                        order.get_selected_orderline().set_discount(0);
                            this.numpad_state.reset();
                        return;
                    }
                    else
                    {
                        order.get_selected_orderline().set_discount(val);
                    }
                 }

                 else{
                         order.get_selected_orderline().set_discount(val);
                    }
              }
                 else{
                         order.get_selected_orderline().set_discount(val);
                 }

            }else if( mode === 'price'){
                var selected_orderline = order.get_selected_orderline();
                selected_orderline.price_manually_set = true;
                selected_orderline.set_unit_price(val);
            }
    	}
    	}
    	else if(this.pos.config.apply_discount_limit == 'product'){
    	var product_id = order.selected_orderline.product

    	if (order.get_selected_orderline()) {
            var mode = this.numpad_state.get('mode');
            if( mode === 'quantity'){
                order.get_selected_orderline().set_quantity(val);
            }


            else if( mode === 'discount'){
            var mi = Math.round(val)

                if (product_id.product_discount_limit>0){
                    if (mi > product_id.product_discount_limit){
                        this.gui.show_popup('error', {
                            title : _t("Discount Not Possible"),
                            body  : _t("You cannot apply discount above the discount limit."),
                        });
                        order.get_selected_orderline().set_discount(0);
                            this.numpad_state.reset();
                        return;
                    }
                    else
                    {
                        order.get_selected_orderline().set_discount(val);
                    }
                    }
                    else
                    {
                        order.get_selected_orderline().set_discount(val);
                    }
            }

            else if( mode === 'price'){
                var selected_orderline = order.get_selected_orderline();
                selected_orderline.price_manually_set = true;
                selected_orderline.set_unit_price(val);
            }
    	}
    	    
    	}
    },

    });

});



ORDER DISCOUNT REFERENCE

class PosConfig(models.Model):
    _inherit = 'pos.config'

    iface_discount = fields.Boolean(string='Order Discounts', help='Allow the cashier to give discounts on the whole order.')
    discount_pc = fields.Float(string='Discount Percentage', help='The default discount percentage', default=10.0)
    discount_product_id = fields.Many2one('product.product', string='Discount Product',
        domain="[('available_in_pos', '=', True), ('sale_ok', '=', True)]", help='The product used to model the discount.')




#condition passes values % and discount product id
screens.define_action_button({
    'name': 'discount',
    'widget': DiscountButton,
    'condition': function(){
        return this.pos.config.module_pos_discount && this.pos.config.discount_product_id;
    },
});

return {
    DiscountButton: DiscountButton,
}


GLOBAD DISCOUNT 

odoo.define('pos_discount.pos_discount', function (require) {
"use strict";

var core = require('web.core');
var screens = require('point_of_sale.screens');
var models = require('point_of_sale.models');

var _t = core._t;

var existing_models = models.PosModel.prototype.models;
var product_index = _.findIndex(existing_models, function (model) {
    return model.model === "product.product";
});
var product_model = existing_models[product_index];


models.load_models([{
  model:  product_model.model,
  fields: product_model.fields,
  order:  product_model.order,
  domain: function(self) {return [['id', '=', self.config.discount_product_id[0]]];},
  context: product_model.context,
  loaded: product_model.loaded,
}]);


var DiscountButton = screens.ActionButtonWidget.extend({
    template: 'DiscountButton',
    button_click: function(){
        var self = this;
        this.gui.show_popup('number',{
            'title': _t('Discount Percentage'),
                'value': this.pos.config.discount_pc,
            'confirm': function(val) {
                val = Math.round(Math.max(0,Math.min(100,val)));
                self.apply_discount(val);
            },
        });
    },
    apply_discount: function(pc) {
        var order    = this.pos.get_order();
        var lines    = order.get_orderlines();
        var product  = this.pos.db.get_product_by_id(this.pos.config.discount_product_id[0]);
        if (product === undefined) {
            this.gui.show_popup('error', {
                title : _t("No discount product found"),
                body  : _t("The discount product seems misconfigured. Make sure it is flagged as 'Can be Sold' and 'Available in Point of Sale'."),
            });
            return;
        }

        // Remove existing discounts
        var i = 0;
        while ( i < lines.length ) {
            if (lines[i].get_product() === product) {
                order.remove_orderline(lines[i]);
            } else {
                i++;
            }
        }

        // Add discount
        // We add the price as manually set to avoid recomputation when changing customer.
        var base_to_discount = order.get_total_without_tax();
        if (product.taxes_id.length){
            var first_tax = this.pos.taxes_by_id[product.taxes_id[0]];
            if (first_tax.price_include) {
                base_to_discount = order.get_total_with_tax();
            }
        }
        var discount = - pc / 100.0 * base_to_discount;

        if( discount < 0 ){
            order.add_product(product, {
                price: discount,
                lst_price: discount,
                extras: {
                    price_manually_set: true,
                },
            });
        }
    },
});

screens.define_action_button({
    'name': 'discount',
    'widget': DiscountButton,
    'condition': function(){
        return this.pos.config.module_pos_discount && this.pos.config.discount_product_id;
    },
});

return {
    DiscountButton: DiscountButton,
}

});

